version: '3.8'

services:
  nest-backend:
    container_name: nest-app
    image: nest-api
    build:
      dockerfile: Dockerfile
      context: .
    ports:
      - 5001:5000
    env_file:
      - .env.prod
    networks:
      - backend_network
    volumes:
      - logs:/usr/src/app/logs
      - tempfiles:/usr/src/app/temp
    depends_on:
      - nginx-proxy
      - postgres
      - redis

  redis:
    container_name: redis-db
    image: redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    env_file:
      - .env.prod
    ports:
      - 16379:6379
    networks:
      - backend_network
    volumes:
      - redis:/data

  postgres:
    container_name: postgres-db
    image: postgres:15
    ports:
      - 15432:5432
    env_file:
      - .env.prod
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/dbDumpFile:/dbDumpFile

  nginx:
    image: nginx:1.15-alpine
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data: {}
  redis:
    driver: local
  logs:
  tempfiles:
